require("dotenv").config();
const { Telegraf, Markup, session } = require("telegraf");
const fs = require("fs");
const cron = require("node-cron");
const path = require("path");
const express = require("express");
const { TEACHERS, STUDENTS, SECRET_CHANNEL_ID } = require("./config");

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

const SCORES_FILE = "./data/scores.json";

// === –§—É–Ω–∫—Ü–∏–∏ ===
function loadScores() {
  if (!fs.existsSync(SCORES_FILE)) return {};
  return JSON.parse(fs.readFileSync(SCORES_FILE));
}

function saveScores(data) {
  const dir = path.dirname(SCORES_FILE);
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
  fs.writeFileSync(SCORES_FILE, JSON.stringify(data, null, 2));
}

function getColor(score) {
  if (score === 0) return "üü¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ";
  if (score <= 5) return "üü° –ü–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ";
  return "üî¥ –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ";
}

function isTeacher(ctx) {
  const username = `@${ctx.from.username || ""}`;
  return TEACHERS.includes(username);
}

// === RESET (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ===
if (process.env.RESET_SCORES === "true") {
  const scores = {};
  for (const [className, students] of Object.entries(STUDENTS)) {
    scores[className] = {};
    for (const student of students) {
      scores[className][student] = 0;
    }
  }
  fs.mkdirSync("./data", { recursive: true });
  fs.writeFileSync(SCORES_FILE, JSON.stringify(scores, null, 2));
  console.log("üîÅ –í—Å–µ –±–∞–ª–ª—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ 0 (RESET_SCORES=true)");
} else {
  console.log("‚öôÔ∏è RESET_SCORES=false ‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã");
}

// === /start ===
bot.start((ctx) => {
  if (!isTeacher(ctx)) return ctx.reply("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º!");
  ctx.session = {};
  ctx.reply(
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É—á—ë—Ç–∞ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ¬ª.`,
    Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ"]]).resize()
  );
});

// === –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ ===
bot.hears("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ", (ctx) => {
  if (!isTeacher(ctx)) return ctx.reply("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º!");
  ctx.reply(
    "‚ùì –ö–∞–∫–æ–π —Ç–∏–ø —à—Ç—Ä–∞—Ñ–∞ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
    Markup.inlineKeyboard([
      [Markup.button.callback("‚ö†Ô∏è –ü–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (1 –±–∞–ª–ª)", "type_bad")],
      [Markup.button.callback("üö® –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (3 –±–∞–ª–ª–∞)", "type_verybad")],
    ])
  );
});

// === –í—ã–±–æ—Ä —Ç–∏–ø–∞ —à—Ç—Ä–∞—Ñ–∞ ===
bot.action(/type_(.+)/, (ctx) => {
  const type = ctx.match[1];
  ctx.session.type = type === "bad" ? 1 : 3;

  ctx.editMessageText(
    "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
    Markup.inlineKeyboard(
      Object.keys(STUDENTS).map((c) => [Markup.button.callback(c, `class_${c}`)])
    )
  );
  ctx.answerCbQuery();
});

// === –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ ===
bot.action(/class_(.+)/, (ctx) => {
  const className = ctx.match[1];
  ctx.session.className = className;

  ctx.editMessageText(
    `üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ (${className}):`,
    Markup.inlineKeyboard(
      STUDENTS[className].map((s) => [Markup.button.callback(s, `student_${s}`)])
    )
  );
  ctx.answerCbQuery();
});

// === –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ ===
bot.action(/student_(.+)/, async (ctx) => {
  const student = ctx.match[1];
  const { type, className } = ctx.session;

  ctx.session.student = student;

  const scoreTypeText = type === 1 ? "‚ö†Ô∏è –ü–ª–æ—Ö–æ–µ (1 –±–∞–ª–ª)" : "üö® –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ (3 –±–∞–ª–ª–∞)";
  const confirmText = `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\nüìö –ö–ª–∞—Å—Å: ${className}\nüë®‚Äçüéì –£—á–µ–Ω–∏–∫: ${student}\nüè∑Ô∏è –¢–∏–ø —à—Ç—Ä–∞—Ñ–∞: ${scoreTypeText}`;

  await ctx.editMessageText(
    confirmText,
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_add")],
      [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_add")],
    ])
  );
  ctx.answerCbQuery();
});

// === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
bot.action("confirm_add", async (ctx) => {
  const { type, className, student } = ctx.session || {};
  if (!type || !className || !student) return;

  const scores = loadScores();
  if (!scores[className]) scores[className] = {};
  scores[className][student] = (scores[className][student] || 0) + type;
  saveScores(scores);

  const total = scores[className][student];
  const teacher = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
  const message = `‚úÖ ${student} –∏–∑ –∫–ª–∞—Å—Å–∞ ${className} –ø–æ–ª—É—á–∏–ª ${type} —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –±–∞–ª–ª(–æ–≤).\n–í—Å–µ–≥–æ: ${total} (${getColor(total)})\nüë®‚Äçüè´ –î–æ–±–∞–≤–∏–ª: ${teacher}`;

  await ctx.editMessageText(message);
  try {
    await bot.telegram.sendMessage(SECRET_CHANNEL_ID, message);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª:", err);
  }

  ctx.session = {};
  await ctx.reply("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —à—Ç—Ä–∞—Ñ?", Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ"]]).resize());
  ctx.answerCbQuery("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!");
});

// === –û—Ç–º–µ–Ω–∞ ===
bot.action("cancel_add", async (ctx) => {
  ctx.session = {};
  await ctx.editMessageText("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
  await ctx.reply("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —à—Ç—Ä–∞—Ñ?", Markup.keyboard([["‚ûï –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ"]]).resize());
  ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
});

// === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç ===
cron.schedule("59 23 * * *", async () => {
  const scores = loadScores();
  if (Object.keys(scores).length === 0) return;

  let report = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç (–∏—Ç–æ–≥ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º):\n\n";
  for (const [className, students] of Object.entries(scores)) {
    report += `üìö ${className}:\n`;
    for (const [name, score] of Object.entries(students)) {
      report += `   ${name} ‚Äî ${score} –±–∞–ª–ª(–æ–≤) (${getColor(score)})\n`;
    }
    report += "\n";
  }

  try {
    await bot.telegram.sendMessage(SECRET_CHANNEL_ID, report);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞:", err);
  }
});

// === Express server (Render ping) ===
const app = express();
app.get("/", (req, res) => res.send("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ (Render + polling)"));
app.listen(process.env.PORT || 3000, () => console.log("üåê Web-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"));

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...");
